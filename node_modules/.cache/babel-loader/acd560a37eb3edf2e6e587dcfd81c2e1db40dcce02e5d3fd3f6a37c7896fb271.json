{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\santi\\\\Desktop\\\\easfefh\\\\Pruebas\\\\Preguntas\\\\preguntas\\\\src\\\\Componentes\\\\ComponentePregunta.js\",\n  _s = $RefreshSig$();\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListaPreguntas = require('../Preguntas/preguntas');\nconsole.log('asdfasdf');\nconst ComponentePregunta = _ref => {\n  _s();\n  let {\n    PreguntasRespondidas\n  } = _ref;\n  const {\n    numero\n  } = useParams();\n  console.log(PreguntasRespondidas);\n  let indicePregunta;\n  do {\n    indicePregunta = Math.round(Math.random() * (ListaPreguntas.length - 1));\n  } while (PreguntasRespondidas.includes(indicePregunta) || indicePregunta.length == 0);\n  let PreguntasAgregadas = [];\n  let IndicesOriginales = [];\n  let NuevoOrdenPosibilidades = [];\n  let Pregunta;\n  let Respuesta;\n  for (let i = 0; i <= 3; i++) {\n    do {\n      Pregunta = Math.round(Math.random() * 3);\n    } while (PreguntasAgregadas.includes(Pregunta));\n    NuevoOrdenPosibilidades.push(ListaPreguntas[indicePregunta].posibilidades[Pregunta]);\n    PreguntasAgregadas.push(Pregunta);\n    IndicesOriginales.push(ListaPreguntas[indicePregunta].posibilidades.indexOf(Pregunta));\n  }\n  const confirmar = s => {\n    s.preventDefault();\n    PreguntasRespondidas.push(indicePregunta);\n    console.log('conf');\n  };\n  function HandleCheck(a) {\n    Respuesta = NuevoOrdenPosibilidades[a];\n  }\n  //for (x in ListaPreguntas[indicePregunta].lineas) {\n\n  //}\n  console.log('asdfads');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ASDMIASODMIOASDO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }, this);\n};\n_s(ComponentePregunta, \"Dc+LvJPED+Iq7ATGgpvFD4R9vDc=\", false, function () {\n  return [useParams];\n});\n_c = ComponentePregunta;\nexport default ComponentePregunta;\nvar _c;\n$RefreshReg$(_c, \"ComponentePregunta\");","map":{"version":3,"names":["useParams","jsxDEV","_jsxDEV","ListaPreguntas","require","console","log","ComponentePregunta","_ref","_s","PreguntasRespondidas","numero","indicePregunta","Math","round","random","length","includes","PreguntasAgregadas","IndicesOriginales","NuevoOrdenPosibilidades","Pregunta","Respuesta","i","push","posibilidades","indexOf","confirmar","s","preventDefault","HandleCheck","a","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/santi/Desktop/easfefh/Pruebas/Preguntas/preguntas/src/Componentes/ComponentePregunta.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\n\r\nconst ListaPreguntas = require('../Preguntas/preguntas')\r\nconsole.log('asdfasdf')\r\n\r\n\r\nconst ComponentePregunta = ({PreguntasRespondidas}) => {\r\n\r\n    const {numero} = useParams()\r\n\r\n    console.log(PreguntasRespondidas)\r\n    let indicePregunta;\r\n    do{\r\n        indicePregunta = Math.round(Math.random()*(ListaPreguntas.length-1))\r\n    }\r\n    while (PreguntasRespondidas.includes(indicePregunta) || indicePregunta.length==0 )\r\n    let PreguntasAgregadas = []\r\n    let IndicesOriginales = []\r\n    let NuevoOrdenPosibilidades = []\r\n    let Pregunta\r\n    let Respuesta\r\n    for (let i = 0 ; i <= 3 ; i++) {\r\n        do {\r\n        Pregunta = Math.round(Math.random()*3)\r\n        }\r\n        while (PreguntasAgregadas.includes(Pregunta))\r\n\r\n        NuevoOrdenPosibilidades.push(ListaPreguntas[indicePregunta].posibilidades[Pregunta])\r\n        PreguntasAgregadas.push(Pregunta)\r\n        IndicesOriginales.push(ListaPreguntas[indicePregunta].posibilidades.indexOf(Pregunta))\r\n    }\r\n\r\n        const confirmar =s=>{\r\n            s.preventDefault()\r\n            PreguntasRespondidas.push(indicePregunta)\r\n            console.log('conf')\r\n        }\r\n    function HandleCheck (a) {\r\n        Respuesta = NuevoOrdenPosibilidades[a]\r\n    }\r\n        //for (x in ListaPreguntas[indicePregunta].lineas) {\r\n            \r\n        //}\r\n        console.log('asdfads')\r\n        return ( \r\n            <div>\r\n                <h1>ASDMIASODMIOASDO</h1>\r\n\r\n            {/*  < div className='ComponentePregunta' >\r\n                <div>\r\n                    {ListaPreguntas[indicePregunta].pregunta}\r\n                        \r\n                    \r\n                    {ListaPreguntas[indicePregunta].lineas.map(linea=>(\r\n                        <p key={ListaPreguntas[indicePregunta].lineas.indexOf(linea)} >{linea}</p>\r\n                        \r\n                    ))\r\n                    }\r\n                    \r\n                </div>\r\n                    <div>\r\n                        <form onSubmit={confirmar}>\r\n                            <p> <input type='radio' name='opcion' onChange={()=>HandleCheck(0)}/> {NuevoOrdenPosibilidades[0]} </p> \r\n                            <p> <input type='radio' name='opcion' onChange={()=>HandleCheck(1)}/> {NuevoOrdenPosibilidades[1]} </p> \r\n                            <p> <input type='radio' name='opcion' onChange={()=>HandleCheck(2)}/> {NuevoOrdenPosibilidades[2]} </p> \r\n                            <p> <input type='radio' name='opcion' onChange={()=>HandleCheck(3)}/> {NuevoOrdenPosibilidades[3]} </p> \r\n                            <button type='submit' >Confirmar</button>\r\n                        </form>\r\n                    </div>\r\n                  {/*   <div className='barraProgreso'>\r\n                        <div className='b1'/><div className='b2'/><div className='b3'/><div className='b4'/><div className='b5'/>\r\n                        <div className='b6'/><div className='b7'/><div className='b8'/><div className='b9'/><div className='b10'/>\r\n                    </div>\r\n                      \r\n                </div> */}\r\n            </div>\r\n        );\r\n}\r\n \r\nexport default ComponentePregunta;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,cAAc,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACxDC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;AAGvB,MAAMC,kBAAkB,GAAGC,IAAA,IAA4B;EAAAC,EAAA;EAAA,IAA3B;IAACC;EAAoB,CAAC,GAAAF,IAAA;EAE9C,MAAM;IAACG;EAAM,CAAC,GAAGX,SAAS,EAAE;EAE5BK,OAAO,CAACC,GAAG,CAACI,oBAAoB,CAAC;EACjC,IAAIE,cAAc;EAClB,GAAE;IACEA,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAEZ,cAAc,CAACa,MAAM,GAAC,CAAC,CAAC,CAAC;EACxE,CAAC,QACMN,oBAAoB,CAACO,QAAQ,CAACL,cAAc,CAAC,IAAIA,cAAc,CAACI,MAAM,IAAE,CAAC;EAChF,IAAIE,kBAAkB,GAAG,EAAE;EAC3B,IAAIC,iBAAiB,GAAG,EAAE;EAC1B,IAAIC,uBAAuB,GAAG,EAAE;EAChC,IAAIC,QAAQ;EACZ,IAAIC,SAAS;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAGA,CAAC,IAAI,CAAC,EAAGA,CAAC,EAAE,EAAE;IAC3B,GAAG;MACHF,QAAQ,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAC,CAAC,CAAC;IACtC,CAAC,QACMG,kBAAkB,CAACD,QAAQ,CAACI,QAAQ,CAAC;IAE5CD,uBAAuB,CAACI,IAAI,CAACrB,cAAc,CAACS,cAAc,CAAC,CAACa,aAAa,CAACJ,QAAQ,CAAC,CAAC;IACpFH,kBAAkB,CAACM,IAAI,CAACH,QAAQ,CAAC;IACjCF,iBAAiB,CAACK,IAAI,CAACrB,cAAc,CAACS,cAAc,CAAC,CAACa,aAAa,CAACC,OAAO,CAACL,QAAQ,CAAC,CAAC;EAC1F;EAEI,MAAMM,SAAS,GAAEC,CAAC,IAAE;IAChBA,CAAC,CAACC,cAAc,EAAE;IAClBnB,oBAAoB,CAACc,IAAI,CAACZ,cAAc,CAAC;IACzCP,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACvB,CAAC;EACL,SAASwB,WAAWA,CAAEC,CAAC,EAAE;IACrBT,SAAS,GAAGF,uBAAuB,CAACW,CAAC,CAAC;EAC1C;EACI;;EAEA;EACA1B,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtB,oBACIJ,OAAA;IAAA8B,QAAA,eACI9B,OAAA;MAAA8B,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAK;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QA6BvB;AAElB,CAAC;AAAA3B,EAAA,CAvEKF,kBAAkB;EAAA,QAEHP,SAAS;AAAA;AAAAqC,EAAA,GAFxB9B,kBAAkB;AAyExB,eAAeA,kBAAkB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}